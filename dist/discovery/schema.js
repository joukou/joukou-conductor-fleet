var DiscoverySchema, schemajs, _;

schemajs = require("schemajs");

_ = require("lodash");

DiscoverySchema = (function() {
  DiscoverySchema.prototype.id = "";

  DiscoverySchema.prototype.type = "";

  DiscoverySchema.prototype.properties = {};

  DiscoverySchema.prototype.schema = null;

  DiscoverySchema.prototype.schemaOptions = null;

  DiscoverySchema.prototype.client = null;


  /**
  * @param {string} id
  * @param {string} type
  * @param {Object} properties
   */

  function DiscoverySchema(id, type, properties, client) {
    this.id = id;
    this.type = type;
    this.properties = properties;
    this.client = client;
    if (!type) {
      throw new Error("Type is required");
    }
  }

  DiscoverySchema.prototype.validate = function(value) {
    var validation, values;
    if (value === null || value === void 0) {
      return {
        valid: false,
        value: value,
        reason: "Value is null or undefined",
        noValue: true
      };
    }
    if (this.type === "string" && typeof value !== "string") {
      value = JSON.stringify(value);
    }
    if (!DiscoverySchema.checkType(value, this.type)) {
      return {
        valid: false,
        value: value,
        reason: "Type of value isn't " + this.type
      };
    }
    if (this.type === "object") {
      validation = this._validateSchema(value);
      if (validation.valid) {
        return {
          valid: true,
          value: validation.data
        };
      } else {
        values = _.values(validation.errors);
        return {
          valid: false,
          value: value,
          reason: values[0]
        };
      }
    } else {
      return {
        valid: true,
        value: value
      };
    }
  };

  DiscoverySchema.checkType = function(value, type) {
    switch (type) {
      case "array":
        return _.isArray(value);
      case "object":
        return _.isPlainObject(value);
      case "string":
        return _.isString(value);
      case "integer":
        if (!_.isNumber(value)) {
          return false;
        }
        return value === parseInt(value);
      case "number":
        return _.isNumber(value);
      case "boolean":
        return _.isBoolean(value);
      case "any":
        return true;
      default:
        return false;
    }
  };

  DiscoverySchema.prototype._validateSchema = function(value) {
    this._generateSchema();
    return this.schema.validate(value);
  };

  DiscoverySchema.prototype._generateSchema = function() {
    if (!schemajs.types.any) {
      schemajs.types.any = function() {
        return true;
      };
    }
    return this.schema = this.schema || schemajs.create(this._generateSchemaOptions());
  };

  DiscoverySchema.prototype._generateSchemaOptions = function() {
    var key, options, property;
    if (this.schemaOptions) {
      return this.schemaOptions;
    }
    options = {};
    for (key in this.properties) {
      if (!this.properties.hasOwnProperty(key)) {
        continue;
      }
      property = this.properties[key];
      if (property.type === "array" || property.type === "object") {
        this._attachChildSchema(options, property, key);
      } else {
        options[key] = {
          type: this._correctType(property.type),
          required: !!property.required
        };
      }
    }
    return this.schemaOptions = options;
  };

  DiscoverySchema.prototype._correctType = function(type) {
    if (type === "integer") {
      return "int";
    }
    return type;
  };

  DiscoverySchema.prototype._attachChildSchema = function(options, property, key) {
    var childSchema, ref;
    if (property.type !== "object" && property.type !== "array") {
      return;
    }
    options[key] = {
      type: property.type,
      required: !!property.required
    };
    ref = null;
    if (property.type === "array" && property.items instanceof Object) {
      ref = property.items.$ref;
    } else if (property.type === "object") {
      ref = property.$ref;
    }
    if (!ref) {
      return;
    }
    childSchema = this.client.getSchema(ref);
    if (!childSchema || childSchema === this) {
      return;
    }
    if (property.type === "object" && childSchema.type !== "object") {
      throw new Error("Child schema must be an object is property is an object");
    }
    if (childSchema.type === "object") {
      if (property.type === "object") {
        return options[key].schema = childSchema._generateSchemaOptions();
      } else {
        return options[key].schema = {
          schema: childSchema._generateSchemaOptions(),
          type: childSchema.type
        };
      }
    } else {
      return options[key].schema = {
        type: this._correctType(childSchema.type)
      };
    }
  };

  return DiscoverySchema;

})();

module.exports = DiscoverySchema;

//# sourceMappingURL=data:application/json;base64,